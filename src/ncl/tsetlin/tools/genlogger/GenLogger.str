probe.header.group [group,id] $$
		for(int i=0; i<%s; i++)
			fprintf(log->fp, "%s%%d\t", i);
$$
probe.header [id] $$
		fprintf(log->fp, "%s\t");
$$
probe.log.group\ [group] = \tfor(int i=0; i<%s; i++)\n\t
probe.log [fmt,code] $$
	fprintf(log->fp, "%s\t", %s);
$$
var.cache.group [type,cache,group] $$
	%s %s[%s];
$$
var.cache [type,cache] $$
	%s %s;
$$
var.cache.reset.group [group,cache] $$
	for(int i=0; i<%s; i++)
		log->%s[i] = 0;
$$
var.cache.reset [cache] $$
	log->%s = 0;
$$
var.code.cache.group [cache] = log->%s[i]
var.code.cache [cache] = log->%s
event.code.avg [counter,avg] = tm->%s/(double)%s
event.code [counter] = tm->%s
event.log [counter,reset] $$
		tm->%s = %s;
$$

counter.fmt\ [name] = \\\n\tint %s;\s
counter.reset.fmt\ [name,reset] = \\\n\ttm->%s = %s;\s

log.pathconst [name.uppercase] = LOG_%s_PATH

defs.begin $$
#ifndef _TSETLIN_LOGGER_DEFS_H_
#define _TSETLIN_LOGGER_DEFS_H_

$$

main.begin $$
#ifndef _TSETLIN_LOGGER_H_
#define _TSETLIN_LOGGER_H_

$$

end $$
#endif
$$

include [inc] $$
#include %s
$$
inc.file [inc] = "%s"
inc.std [inc] = <%s>

defs.path [pathconst,path] $$
#define %s "%s"
$$

log.enable.defs [enable] $$
int %s = 0;
$$

log.counter.defs [counters,reset] $$
#define ENABLE_COUNTERS 1

#if ENABLE_COUNTERS

#define TM_COUNTERS %s

#define RESET_COUNTERS(tm) %s

#define COUNT(c) (c)++

#else

#define TM_COUNTERS
#define RESET_COUNTERS(tm)
#define COUNT(c)

#endif
$$

log.sep [name] $$
// ------------------- %s -------------------
$$

log.struct.begin [name] $$
struct Log%s {
	FILE* fp;
$$

log.struct.begin.cls [name] $$
struct Log%s {
	int cls;
	FILE* fp;
$$

log.struct.end $$
};
$$

log.enablecheck [enable] $$
	if(!%s)
		return;
$$

log.start.func [name] $$
void startLog%1$s(Log%1$s* log) {
$$

log.start.func.cls [name] $$
void startLog%1$s(int cls, Log%1$s* log) {
$$

log.start.begin [path] $$
	log->fp = fopen(%1$s, LOG_APPEND ? "at" : "wt");
	if (log->fp == NULL) {
		printf("Error writing %%s\n", %1$s);
		exit(EXIT_FAILURE);
	}
	if(!LOG_APPEND) {
		fprintf(log->fp, "t\t");
$$

log.start.begin.cls [path] $$
	log->cls = cls;
	char s[1024];
	sprintf(s, %1$s, cls);
	log->fp = fopen(s, LOG_APPEND ? "at" : "wt");
	if (log->fp == NULL) {
		printf("Error writing %%s\n", s);
		exit(EXIT_FAILURE);
	}
	if(!LOG_APPEND) {
		fprintf(log->fp, "t\t");
$$

log.start.flush $$
		fprintf(log->fp, "\n");
		fflush(log->fp);
	}
$$

log.start.end $$
}
$$

log.log.func [name,args] $$
void log%1$s(Log%1$s* log, int step%2$s) {
$$

log.log.begin $$
	fprintf(log->fp, "%%d\t", step);
$$

log.log.end $$
	fprintf(log->fp, "\n");
	fflush(log->fp);
}
$$

log.finish.func [name] $$
void finishLog%1$s(Log%1$s* log) {
$$

log.finish $$
	fclose(log->fp);
}
$$

spectrum.defs [minState,maxState] $$
#define MIN_STATE (%s)
#define MAX_STATE (%s)
$$

spectrum.localdefs $$
#define TOTAL_STATES (MAX_STATE-MIN_STATE+1)
#define STATE_INDEX(s) ((s)-MIN_STATE)
$$

spectrum.headers $$
		for(int s=MIN_STATE; s<=MAX_STATE; s++) {
			fprintf(log->fp, "s%+d\t", s);
		}
$$

spectrum.log.body [clauses,literals,tastate] $$
	int counts[TOTAL_STATES];
	for(int s=0; s<TOTAL_STATES; s++)
		counts[s] = 0;
	for(int j=0; j<%1$s; j++)		
		for(int k=0; k<%2$s; k++)
			counts[STATE_INDEX(%3$s)]++;
	for(int s=0; s<TOTAL_STATES; s++)
		fprintf(log->fp, "%%d\t", counts[s]);
$$
